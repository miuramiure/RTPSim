//====================================================================/
//　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　/
// artisoc                                                            /
//                                                                    /
//====================================================================/

Version = 3.5;



//-------------------------------------------------------
// Component Tree
//-------------------------------------------------------
UNIVERSE {
    Space powergrid(0,0),Square_2D(150, 150, !Loop, North, 1, !Map_3D){
        AgtType trans(0, 0)[0] {
            Dim ID(0, 0) As Integer = (0);
            Dim X(0, 0) As Double = (0.0);
            Dim Y(0, 0) As Double = (0.0);
            Dim Layer(0, 0) As Integer = (0);
            Dim Direction(0, 0) As Double = (0.0);
            Dim from_player(0, 0) As Agt = (0);
            Dim to_player(0, 0) As Agt = (0);
            Dim from_terminal(0, 0) As Agt = (0);
            Dim to_terminal(0, 0) As Agt = (0);
            Dim p(0, 0) As Double = (0.0);
            Dim f(0, 0) As Double = (0.0);
            Dim b(0, 0) As Double = (0.0);
            Dim k(0, 0) As Double = (0.0);
            Dim dp(0, 0) As Double = (0.0);
            Dim x_i(0, 0) As Double = (0.0);
            Dim x_i_next(0, 0) As Double = (0.0);
            Dim C1(0, 0) As Double = (0.0);
            Dim C2(0, 0) As Double = (0.0);
            Dim C3(0, 0) As Double = (0.0);
            Dim C4(0, 0) As Double = (0.0);
            Dim D1(0, 0) As Double = (0.0);
            Dim D2(0, 0) As Double = (0.0);
            Dim D3(0, 0) As Double = (0.0);
            Dim D4(0, 0) As Double = (0.0);
            Dim U(0, 0) As Double = (0.0);
            Dim dU(0, 0) As Double = (0.0);
            Dim dG(0, 0) As Integer = (0);
        }
        AgtType trans_terminal(0, 0)[0] {
            Dim ID(0, 0) As Integer = (0);
            Dim X(0, 0) As Double = (0.0);
            Dim Y(0, 0) As Double = (0.0);
            Dim Layer(0, 0) As Integer = (0);
            Dim Direction(0, 0) As Double = (0.0);
            Dim type(0, 0) As String = ("");
            Dim area(0, 0) As Agt = (0);
            Dim trans(0, 0) As Agt = (0);
            Dim pair(0, 0) As AgtSet = ();
            Dim link(0, 0) As AgtSet = ();
            Dim theta(0, 0) As Double = (0.0);
            Dim theta_next(0, 0) As Double = (0.0);
            Dim lamda(0, 0) As Double = (0.0);
            Dim gamma(0, 0) As Double = (0.0);
            Dim x_i(0, 0) As Double = (0.0);
            Dim u_x(0, 0) As Double = (0.0);
            Dim u_l(0, 0) As Double = (0.0);
            Dim v_l(0, 0) As Double = (0.0);
            Dim v_xl(0, 0) As Double = (0.0);
            Dim a_i(0, 0) As Double = (0.0);
            Dim b_i(0, 0) As Double = (0.0);
            Dim x_s(0, 0) As Double = (0.0);
            Dim x_est_0(0, 0) As Double = (0.0);
            Dim x_est(0, 0) As Double = (0.0);
        }
        AgtType home(0, 0)[0] {
            Dim ID(0, 0) As Integer = (0);
            Dim X(0, 0) As Double = (0.0);
            Dim Y(0, 0) As Double = (0.0);
            Dim Layer(0, 0) As Integer = (0);
            Dim Direction(0, 0) As Double = (0.0);
            Dim link(0, 0) As AgtSet = ();
            Dim e(0, 0) As Double = (0.0);
            Dim m(0, 0) As Double = (0.0);
            Dim e_new(0, 0) As Double = (0.0);
            Dim trans_in_set(0, 0) As AgtSet = ();
            Dim trans_out_set(0, 0) As AgtSet = ();
            Dim serial(0, 0) As Integer = (0);
            Dim p(0, 0) As Double = (0.0);
            Dim b(0, 0) As Double = (0.0);
            Dim k(0, 0) As Double = (0.0);
            Dim dp(0, 0) As Double = (0.0);
            Dim x_i(0, 0) As Double = (0.0);
            Dim x_i_next(0, 0) As Double = (0.0);
            Dim C1(0, 0) As Double = (0.0);
            Dim C2(0, 0) As Double = (0.0);
            Dim C3(0, 0) As Double = (0.0);
            Dim C4(0, 0) As Double = (0.0);
            Dim D1(0, 0) As Double = (0.0);
            Dim D2(0, 0) As Double = (0.0);
            Dim D3(0, 0) As Double = (0.0);
            Dim D4(0, 0) As Double = (0.0);
            Dim U(0, 0) As Double = (0.0);
            Dim dU(0, 0) As Double = (0.0);
            Dim dG(0, 0) As Integer = (0);
            Dim area(0, 0) As Agt = (0);
            Dim theta(0, 0) As Double = (0.0);
            Dim theta_next(0, 0) As Double = (0.0);
            Dim lamda(0, 0) As Double = (0.0);
            Dim gamma(0, 0) As Double = (0.0);
            Dim u_x(0, 0) As Double = (0.0);
            Dim u_l(0, 0) As Double = (0.0);
            Dim v_l(0, 0) As Double = (0.0);
            Dim v_xl(0, 0) As Double = (0.0);
            Dim a_i(0, 0) As Double = (0.0);
            Dim b_i(0, 0) As Double = (0.0);
            Dim sv_lamda(0, 0) As Double = (0.0);
            Dim x_s(0, 0) As Double = (0.0);
            Dim x_est_0(0, 0) As Double = (0.0);
            Dim x_est(0, 0) As Double = (0.0);
        }
        AgtType solar(0, 0)[0] {
            Dim ID(0, 0) As Integer = (0);
            Dim X(0, 0) As Double = (0.0);
            Dim Y(0, 0) As Double = (0.0);
            Dim Layer(0, 0) As Integer = (0);
            Dim Direction(0, 0) As Double = (0.0);
            Dim link(0, 0) As AgtSet = ();
            Dim e(0, 0) As Double = (0.0);
            Dim m(0, 0) As Double = (0.0);
            Dim e_new(0, 0) As Double = (0.0);
            Dim trans_in_set(0, 0) As AgtSet = ();
            Dim trans_out_set(0, 0) As AgtSet = ();
            Dim serial(0, 0) As Integer = (0);
            Dim p(0, 0) As Double = (0.0);
            Dim b(0, 0) As Double = (0.0);
            Dim k(0, 0) As Double = (0.0);
            Dim dp(0, 0) As Double = (0.0);
            Dim x_i(0, 0) As Double = (0.0);
            Dim x_i_next(0, 0) As Double = (0.0);
            Dim C1(0, 0) As Double = (0.0);
            Dim C2(0, 0) As Double = (0.0);
            Dim C3(0, 0) As Double = (0.0);
            Dim C4(0, 0) As Double = (0.0);
            Dim D1(0, 0) As Double = (0.0);
            Dim D2(0, 0) As Double = (0.0);
            Dim D3(0, 0) As Double = (0.0);
            Dim D4(0, 0) As Double = (0.0);
            Dim U(0, 0) As Double = (0.0);
            Dim dU(0, 0) As Double = (0.0);
            Dim dG(0, 0) As Integer = (0);
            Dim area(0, 0) As Agt = (0);
            Dim theta(0, 0) As Double = (0.0);
            Dim theta_next(0, 0) As Double = (0.0);
            Dim lamda(0, 0) As Double = (0.0);
            Dim gamma(0, 0) As Double = (0.0);
            Dim u_x(0, 0) As Double = (0.0);
            Dim u_l(0, 0) As Double = (0.0);
            Dim v_l(0, 0) As Double = (0.0);
            Dim v_xl(0, 0) As Double = (0.0);
            Dim a_i(0, 0) As Double = (0.0);
            Dim b_i(0, 0) As Double = (0.0);
            Dim x_s(0, 0) As Double = (0.0);
            Dim x_est_0(0, 0) As Double = (0.0);
            Dim x_est(0, 0) As Double = (0.0);
        }
        AgtType area(0, 0)[0] {
            Dim ID(0, 0) As Integer = (0);
            Dim X(0, 0) As Double = (0.0);
            Dim Y(0, 0) As Double = (0.0);
            Dim Layer(0, 0) As Integer = (0);
            Dim Direction(0, 0) As Double = (0.0);
            Dim dp(0, 0) As Double = (0.0);
            Dim k(0, 0) As Double = (0.0);
            Dim b(0, 0) As Double = (0.0);
            Dim p(0, 0) As Double = (0.0);
            Dim serial(0, 0) As Integer = (0);
            Dim trans_out_set(0, 0) As AgtSet = ();
            Dim trans_in_set(0, 0) As AgtSet = ();
            Dim e_new(0, 0) As Double = (0.0);
            Dim m(0, 0) As Double = (0.0);
            Dim e(0, 0) As Double = (0.0);
            Dim link(0, 0) As AgtSet = ();
            Dim members(0, 0) As AgtSet = ();
            Dim lamda(0, 0) As Double = (0.0);
            Dim lamda_next(0, 0) As Double = (0.0);
            Dim G_i(0, 0) As Double = (0.0);
            Dim trans_terminals(0, 0) As AgtSet = ();
            Dim nego_convergence(0, 0) As Double = (0.0);
            Dim init_ave(0, 0) As Double = (0.0);
            Dim G_DATA(0, 0)[14400] As Double = ();
        }
    }
    Dim alpha(0, 0) As Double = (0.0);
    Dim beta(0, 0) As Double = (0.0);
    Dim link_range_area(0, 0) As Double = (0.0);
    Dim link_range_player(0, 0) As Double = (0.0);
    Dim min_range_between_area(0, 0) As Double = (0.0);
    Dim count(0, 0) As Integer = (0);
    Dim time_min(0, 0) As Integer = (0);
    Dim time_hour(0, 0) As Integer = (0);
    Dim time_day(0, 0) As Integer = (0);
    Dim home_num(0, 0) As Integer = (0);
    Dim solar_num(0, 0) As Integer = (0);
    Dim area_num(0, 0) As Integer = (0);
    Dim U_total(0, 0) As Double = (0.0);
    Dim e_total(0, 0) As Double = (0.0);
    Dim space_width(0, 0) As Double = (0.0);
    Dim space_height(0, 0) As Double = (0.0);
    Dim RandomSeed(0, 0) As Double = (0.0);
    Dim DATA_time_min(0, 0)[14400] As Double = (14400*0.0);
    Dim DATA_e_total(0, 0)[14400] As Double = (14400*0.0);
    Dim step_total(0, 0) As Integer = (0);
    Dim nego_mode(0, 0) As Boolean = (0);
    Dim nego_step_number(0, 0) As Integer = (0);
    Dim ct_nego(0, 0) As Integer = (0);
    Dim mode(0, 0) As String = ("");
    Dim gamma(0, 0) As Double = (0.0);
    Dim s(0, 0) As Integer = (0);
    Dim beta_d(0, 0) As Double = (0.0);
    Dim time_second(0, 0) As Integer = (0);
    Dim pricing_mode(0, 0) As Integer = (0);
    Dim pricing_mode_text(0, 0) As String = ("");
    Dim output(0, 0)[13] As Double = ();
    Dim DATA_G_displayed(0, 0)[14400] As Double = ();
    Dim clicked_area(0, 0) As Integer = ();
}


//-------------------------------------------------------
// Agent Variable Initial Data
//-------------------------------------------------------
Initial_Value {
    UNIVERSE.ALPHA = 1(0.06);
    UNIVERSE.BETA = 1(0.04);
    UNIVERSE.LINK_RANGE_AREA = 1(50.0);
    UNIVERSE.LINK_RANGE_PLAYER = 1(6.0);
    UNIVERSE.COUNT = 1(0);
    UNIVERSE.HOME_NUM = 1(15);
    UNIVERSE.SOLAR_NUM = 1(15);
    UNIVERSE.AREA_NUM = 1(14);
    UNIVERSE.SPACE_WIDTH = 1(0.0);
    UNIVERSE.SPACE_HEIGHT = 1(0.0);
    UNIVERSE.RANDOMSEED = 1(18.0);
    UNIVERSE.NEGO_STEP_NUMBER = 1(100);
    UNIVERSE.GAMMA = 1(0.04);
    UNIVERSE.S = 1(0);
    UNIVERSE.BETA_D = 1(1.2);
    UNIVERSE.PRICING_MODE_TEXT = 1("交渉型：零時間");
    UNIVERSE.OUTPUT = 1(13*0.0);
    UNIVERSE.CLICKED_AREA = 1(0);
}


//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE
include "basic_func.inc" //基礎的な独自関数をインポート

Univ_Init{

ClearConsoleScreen() //コンソールをクリア
SetRandomSeed(Universe.RandomSeed)

Universe.nego_step_number=100

//-------------------------------------------------------
//テンポラリー変数，インクリメント変数の宣言
//-------------------------------------------------------

//インクリメント変数
Dim i as Integer

//-------------------------------------------------------
//パラメータの設定＆事前処理
//-------------------------------------------------------
Dim calc_time_min as Integer 
Dim temp_array(1440) as Double

for i=0 to GetArraySize(temp_array)-1
	temp_array( i )=0
next i

Universe.DATA_time_min=temp_array
Universe.e_total=temp_array

//空間のサイズを取得
Universe.space_width=GetWidthSpace(Universe.powergrid) //空間の幅(x)
Universe.space_height=GetHeightSpace(Universe.powergrid) //空間の高さ(y)

//モード表示
if Universe.pricing_mode_text=="スーパーバイザ方式" then
	PrintLn("価格調整：スーパーバイザ方式")
	Universe.pricing_mode=0
end if

if Universe.pricing_mode_text=="交渉型：零時間" then
	PrintLn("価格調整：交渉型（実際のx_(s+1)の値を使って交渉開始）")
	Universe.pricing_mode=1
end if

if Universe.pricing_mode_text=="交渉型：予測無" then
	PrintLn("価格調整：交渉型（x_sの値を使って交渉開始）")
	Universe.pricing_mode=2
end if

if Universe.pricing_mode_text=="交渉型：予測有" then
	PrintLn("価格調整：逐次線形回帰法を用いてx_(s+1)を予測")
	Universe.pricing_mode=3
end if

//-------------------------------------------------------
//エージェントの生成と配置
//-------------------------------------------------------

//areaエージェントの生成と配置
For i=1 to Universe.area_num
	CreateAgt(Universe.powergrid.area) 
next i

}


Univ_Step_Begin{

//-------------------------------------------------------
//テンポラリー変数，インクリメント変数の宣言
//-------------------------------------------------------
Dim r_max as Double
Dim terminal_position as Double
Dim r as Double
Dim theta as Double
Dim area_set as AgtSet
Dim temp_agt as Agt
Dim temp_agt2 as Agt
Dim temp_agt3 as Agt
Dim player_agtset as AgtSet
Dim temp_agtset as AgtSet
Dim num_temp as Integer
Dim check_counter as Integer
//インクリメント変数
Dim i as Integer
Dim ct as Integer
Dim loop_ct as Integer
Dim one as Agt
Dim one2 as Agt

//-------------------------------------------------------
//パラメータの設定＆事前処理
//-------------------------------------------------------
Universe.min_range_between_area=30
r_max=10  //地域の中に需要供給エージェントを配置するときの範囲（地域中心から半径r_max以内）
terminal_position=2/3

//-------------------------------------------------------
//エージェントの生成と配置
//エージェントの生成と配置は初回ステップのみ実行する
//-------------------------------------------------------

if Universe.count== 0 Then //初回ステップのみ

	//-------------------------------------------------------
	//地域エージェントを配置する
	//-------------------------------------------------------
	MakeAgtSet(area_set, Universe.powergrid.area) //地域エージェントをarea_setに格納
	RandomPutAgtset(area_set) //地域エージェントをランダムに配置(とりあえず配置)
	
	//地域同士が重なる場合や孤立する場合を修正する
	loop_ct=0 //ループカウンタ
	Do While 1
		check_counter=0
		//地域同士が重なる場合はcheck_counterを+1して該当する地域を再ランダム配置
		//地域間の距離がmin_range_between_area以下の場合，重なっていると判断する
       		For each one in area_set
			MakeOneAgtSetAroundPosition(temp_agtset,Universe.powergrid, one.X, one.Y, one.Layer, Universe.min_range_between_area,Universe.powergrid.area)
			DelAgtSet2(temp_agtset, one)
			ct=CountAgtSet(temp_agtset)
			if ct>0 then //再ランダム配置
				check_counter=check_counter+1
				one.X=Universe.space_width*Rnd()
				one.Y=Universe.space_height*Rnd()
			End if
		next one
		//孤立地域がある場合はcheck_counterを+1して該当する地域を再ランダム配
		For each one in area_set
			MakeOneAgtSetAroundPosition(temp_agtset,Universe.powergrid, one.X, one.Y, one.Layer, Universe.link_range_area,Universe.powergrid.area)
			DelAgtSet2(temp_agtset, one)
			ct=CountAgtSet(temp_agtset)
			if ct==0 then //再ランダム配置
				check_counter=check_counter+1
				one.X=Universe.space_width*Rnd()
				one.Y=Universe.space_height*Rnd()
			End if
		next one
		//重なり地域も孤立地域もない場合(check_counter=0のとき)Breakする
		if check_counter==0 then
			PrintLn("地域の配置を完了しました")
			Break
		End if
		//再配置の試行回数が一定数以上になった場合もBreakする(重複，孤立地域は諦める)
		loop_ct=loop_ct+1
		if loop_ct>=30000 then
			PrintLn("地域の配置に失敗しました")
			Break
		End if
	Loop
	
	//-------------------------------------------------------
	//地域エージェント間にリンク(送電線)を生成する
	//-------------------------------------------------------
	ClearAgtSet(area_set)
	MakeAgtSet(area_set, Universe.powergrid.area)
	
	//地域エージェントにserialを付与する(serial=1,2,...)
	i=1 //インクリメント変数の初期化
	For each one in area_set
		one.serial=i
		i=i+1
	next one
	
	//隣接する地域をlinkエージェントセットに格納
	For each one in area_set
		ClearAgtset (one.link) 
		MakeOneAgtSetAroundPosition(one.link,  Universe.powergrid, one.X, one.Y, one.Layer, Universe.link_range_area, Universe.powergrid.area) //自分のまわりの視野内にいるエージェント取得
		DelAgtSet2(one.link, one) //linkから自分自身を削除
	next one

	//-------------------------------------------------------
	//隣接する地域の間に送電エージェント(trans)を生成してtrans_in_set(AgtSet)またはtrans_out_set(AgtSet)に格納
	//serialが大きい地域から小さい地域へ流れがあるときを正とする
	//<地域A>→<送電家Z>→<地域B>のように電力の流れがあるとすると
	//・地域Aのserial(Int)が地域Bのserialより大きい
	//・送電家Zは地域Aのtrans_out_set(AgtSet)，地域Bのtrans_in_set(AgtSet)に入る
	//・送電家Zのfrom_player(Agt)は地域A，送電家Zのto_player(Agt)は地域B
	//-------------------------------------------------------	

	For each one in area_set //地域エージェントそれぞれに(one)
		For each one2 in one.link //各地域エージェント(one)の隣接地域それぞれに(one2) (one:地域A, one2:地域B)
			if one.serial>one2.serial then //serialが大きいほうから小さい方に向けて処理をすれば十分（２回処理する必要はない）
				//-------------------------------------------------------
				//送電エージェントを生成して配置する
				//-------------------------------------------------------
				temp_agt=CreateAgt(Universe.powergrid.trans) //送電エージェントを生成
				AddAgt(one.trans_out_set, temp_agt) //送電エージェントをserialが大きい方のエージェント(one)のtrans_out_setに格納
				AddAgt(one2.trans_in_set, temp_agt) //送電エージェントをserialが小さい方のエージェント(one)のtrans_in_setに格納
				temp_agt.from_player=one //送電エージェントから見て上流側の地域をfrom_playerに格納
				temp_agt.to_player=one2  //送電エージェントから見て下流側の地域をto_playerに格納
				//送電エージェントを配置．ただし空間出力には表示しない(送電線のみ表示)
				temp_agt.X=(one.X+one2.X)/2
				temp_agt.Y=(one.Y+one2.Y)/2
				
				//-------------------------------------------------------
				//送電ターミナルを生成して配置する
				//地域A側のターミナルはtype="from"(Str)で，送電家Zのfrom_terminal(Agt)に相当
				//地域B側のターミナルはtype="to"(Str)で，送電家のto_terminal(Agt)に相当
				//ターミナルはそれぞれの地域のtrans_terminals(AgtSet)に格納
				//ターミナルのtrans(Agt)にそれぞれ紐づく送電家を格納
				//-------------------------------------------------------
				r=r_max*terminal_position				
				//地域A側ターミナルの配置
				temp_agt2=CreateAgt(Universe.powergrid.trans_terminal) //地域A側ターミナルを生成
				temp_agt2.trans=temp_agt //地域A側ターミナルのtransに送電家Zを格納
				temp_agt2.area=one //地域A側ターミナルの地域を指定(地域A)
				temp_agt.from_terminal=temp_agt2 //送電家Zのfrom_terminalに地域A側ターミナルを格納
				theta=@direction_agt(one, one2)
				temp_agt2.X=one.X+r*cos(theta/180*PI())
				temp_agt2.Y=one.Y+r*sin(theta/180*PI())
				AddAgt(one.trans_terminals, temp_agt2) //地域Aのtrans_terminalsに格納
				//地域B側ターミナルの配置
				temp_agt3=CreateAgt(Universe.powergrid.trans_terminal) //地域B側ターミナルを生成
				temp_agt3.trans=temp_agt //地域B側ターミナルのtransに送電家Zを格納
				temp_agt3.area=one2 //地域B側ターミナルの地域を指定(地域A)
				temp_agt.to_terminal=temp_agt3 //送電家Zのto_terminalに地域B側ターミナルを格納
				theta=@direction_agt(one2, one)
				temp_agt3.X=one2.X+r*cos(theta/180*PI())
				temp_agt3.Y=one2.Y+r*sin(theta/180*PI())
				AddAgt(one2.trans_terminals, temp_agt3) //地域Aのtrans_terminalsに格納
				//ターミナル間に線を引く(ペアリング)
				AddAgt(temp_agt2.pair, temp_agt3)
				AddAgt(temp_agt3.pair, temp_agt2)
			end if
		next one2
	next one
	
	//-------------------------------------------------------
	//各地域に需要供給家エージェントを配置
	//各種エージェントをランダムに配置し，隣接するものをlink(AgtSet)に入れる(価格調整情報網)
	//-------------------------------------------------------

	For each one in area_set //各地域ごとに
		ClearAgtSet(one.members) //membersを初期化
		ClearAgtSet(player_agtset) //player_agtsetを初期化
		ClearAgtSet(temp_agtset) //temp_agtsetを初期化
		
		//homeエージェントの配置
		num_temp=Universe.home_num //CInt(Universe.home_num/2*(1+Rnd())) //homeエージェント数をランダムで決定(1/2MAX~MAX)
		SetPlayers("home", num_temp, r_max, one)
		
		//solarエージェントの配置
		num_temp=Universe.solar_num //CInt(Universe.solar_num/2*(1+Rnd()))) //solarエージェント数をランダムで決定(1/2MAX~MAX)
		SetPlayers("solar", num_temp, r_max, one)

		//player_agtsetに需要供給家エージェントをリストアップ						
		For each one2 in one.members
			AddAgt(player_agtset, one2)
		next one2
		For each one2 in one.trans_terminals
			AddAgt(player_agtset, one2)
		next one2
		
		//孤立エージェントを修正する
		loop_ct=0 //ループカウンタをリセット
		Do While 1
			check_counter=0
			//孤立エージェントがある場合はcheck_counterを+1して該当するエージェントを再ランダム配置
			ClearAgtset(temp_agtset)
			For each one2 in player_agtset
				MakeAllAgtSetAroundPosition(temp_agtset,Universe.powergrid, one2.X, one2.Y, one2.Layer, Universe.link_range_player)
				DelAgtSet2(temp_agtset, one2) //自分自身を除去
				DelAgtSet(temp_agtset, area_set) //エリアエージェントを除去
				
				ct=CountAgtSet(temp_agtset)
				if ct==0 then //再ランダム配置
					check_counter=check_counter+1
					r=r_max*Rnd()
					theta=2*PI()*Rnd()
					one2.X=one.X+r*cos(theta)
					one2.Y=one.Y+r*sin(theta)
				End if
			next one2
			//孤立エージェントがない場合(check_counter=0のとき)Breakする
			if check_counter==0 then
				PrintLn("地域" & CStr(one.serial) & "の需要供給家の配置を完了しました")
				Break
			End if
			//再配置の試行回数が一定数以上になった場合もBreakする(重複，孤立地域は諦める)
			loop_ct=loop_ct+1
			if loop_ct>=10000 then
				PrintLn("地域" & CStr(one.serial) & "の需要供給家の配置に失敗しました")
				Break
			End if
		Loop

		//隣接する需要供給家をlinkに格納する(赤線)
		For each one2 in player_agtset
			ClearAgtset (one2.link) 
			MakeAllAgtSetAroundPosition(one2.link, Universe.powergrid, one2.X, one2.Y, one2.Layer, Universe.link_range_player)
			DelAgtSet2(one2.link, one2) //自分自身を除去
			DelAgtSet(one2.link, area_set) //エリアエージェントを除去
			DelAgtSet(one2.link, one.trans_out_set) //トランスエージェントを除去
			DelAgtSet(one2.link, one.trans_in_set) //トランスエージェントを除去
		next one2
	
	next one //各地域ごとに
	
End if //初回ステップのみ各エージェントの生成配置

Dim clicked_x as Double
Dim clicked_y as Double
Dim clicked_map as String


//-------------------------------------------------------
//インタラクティブ表示
//-------------------------------------------------------
//マップをクリックすると地域の情報をコンソールに表示する
if IsMouseClickedOnMap() then
		GetClickedMapPosition(clicked_x, clicked_y, clicked_map)
		
		ClearAgtSet(area_set)
		MakeAgtSet(area_set, Universe.powergrid.area)
		
		For Each one in area_set
			If MeasureDistance(one.X, one.Y, clicked_x, clicked_y, Universe.powergrid) < 15 Then
				Universe.clicked_area=one.ID
			End If
		Next one
		
	end if
}


//-------------------------------------------------------
//独自定義関数
//-------------------------------------------------------
//SetPlayers(需要供給エージェントタイプ(文字列), 生成配置するエージェント数, 配置するエリア半径, 配置する地域エージェント)
//需要供給エージェントを生成して地域内のランダムな位置に配置する関数
//戻り値：生成したエージェントから構成されるAgtSet
Function SetPlayers(type as String, n as Integer, r_max as Double, area as Agt) as AgtSet
{
Dim agt_type as AgtType
Dim temp_agt as Agt
Dim r as Double
Dim theta as Double
Dim i as Integer
Dim output as AgtSet

//フルパスのエージェントタイプを取得
type="Universe.powergrid." & type
agt_type=CAgtType(type) 

//nコのエージェント生成して配置
For i=1 to n
	temp_agt =CreateAgt(agt_type) 
	//位置決め(ランダム)
	r=r_max*Rnd()
	theta=2*PI()*Rnd()
	temp_agt.X=area.X+r*cos(theta)
	temp_agt.Y=area.Y+r*sin(theta)
	//該当地域のmembersに登録
	AddAgt(area.members, temp_agt)
	//戻り値AgtSetに登録
	AddAgt(output, temp_agt)
	//地域を登録
	temp_agt.area=area
next i

return(output)
} //SetPlayersの終了


Univ_Step_End{
//-------------------------------------------------------
//変数の宣言
//-------------------------------------------------------
Dim temp_agtset as AgtSet
Dim temp_agtset2 as AgtSet
Dim area_agtset as AgtSet
Dim player_agtset as AgtSet //home,solar,trans
Dim negotiator_agtset as AgtSet //home,solar,trans_terminal
Dim count_min as Integer
Dim count_second as Integer
Dim max_agt as Agt
Dim min_agt as Agt
Dim i as Integer

//-------------------------------------------------------
//パラメータの設定＆事前処理
//-------------------------------------------------------
count_min=Universe.count*0.25 //離散時間を調整
count_second=Universe.count*15

ClearAgtset (area_agtset)
ClearAgtset(player_agtset)
ClearAgtset (negotiator_agtset )
ClearAgtset (temp_agtset)
ClearAgtset (temp_agtset2)

//全ての地域を取得
MakeAgtSet(area_agtset , Universe.powergrid.area)

//全てのプレイヤーを取得
MakeAgtSet(player_agtset, Universe.powergrid.home) //homeを追加
MakeAgtSet(temp_agtset, Universe.powergrid.solar)
JoinAgtSet(player_agtset, temp_agtset) //solarを追加
MakeAgtSet(temp_agtset, Universe.powergrid.trans)
JoinAgtSet(player_agtset, temp_agtset) //transを追加
PurifyAgtSet(player_agtset, player_agtset) //重複を削除

//全ての交渉プレイヤーを取得
MakeAgtSet(negotiator_agtset, Universe.powergrid.home) //homeを追加
MakeAgtSet(temp_agtset, Universe.powergrid.solar)
JoinAgtSet(negotiator_agtset, temp_agtset) //solarを追加
MakeAgtSet(temp_agtset, Universe.powergrid.trans_terminal)
JoinAgtSet(negotiator_agtset, temp_agtset) //trans_terminalを追加
PurifyAgtSet(negotiator_agtset, negotiator_agtset) //重複を削除

//-------------------------------------------------------
//通常モード処理
//-------------------------------------------------------
if Universe.nego_mode==false then 
	//-------------------------------------------------------
	//状態量の更新
	//-------------------------------------------------------
	//停滞量の総量を更新
	Universe.e_total=0
	For each one in area_agtset
		Universe.e_total=Universe.e_total+one.G_i
	next one

	//目的関数を更新
	Universe.U_total=0
	For each one in player_agtset
		Universe.U_total=Universe.U_total+one.U
	next one

	//ラムダを更新
	For each one in area_agtset
		one.lamda=one.lamda_next
	next one

	//x_iを更新
	For each one in player_agtset
		one.x_i=one.x_i_next
	next one
	
	//-------------------------------------------------------
	//時刻の取得
	//-------------------------------------------------------
	Universe.time_second=count_second mod 60
	Universe.time_min=count_min mod 60
	Universe.time_day=count_min \ 1440
	Universe.time_hour=(count_min mod 1440) \ 60
	Universe.mode="通常モード"
	
	Universe.DATA_time_min(Universe.count)=count_min
	Universe.DATA_e_total(Universe.count)=Universe.e_total
	
	//negoモードへの切り替え
	if Universe.time_min == 0 And Universe.time_second == 0 And Universe.step_total !=0 And Universe.pricing_mode != 0 then
		Universe.ct_nego=0
		Universe.nego_mode=true
	end if
	
	//-------------------------------------------------------
	//時間の更新
	//-------------------------------------------------------
	Universe.count=Universe.count+1

end if

//-------------------------------------------------------
//交渉モード処理
//-------------------------------------------------------
if Universe.nego_mode==true then 
	Universe.mode="交渉モード"
	Universe.ct_nego=Universe.ct_nego+1
	if Universe.ct_nego>Universe.nego_step_number then
		Universe.nego_mode=false
		Universe.s=Universe.s+1
	end if
	
	//thetaを更新
	For each one in negotiator_agtset
		one.theta=one.theta_next
	next one
	
	For i = 0 To 5 Step 1　　　　           
   		Universe.output(i)=Universe.powergrid.home(i).theta
	Next i
	For i = 0 To 5 Step 1　　　　           
   		Universe.output(i+5)=Universe.powergrid.solar(i).theta
	Next i

end if


For i=0 to Universe.count
	Universe.DATA_G_displayed(i) = Universe.powergrid.area(Universe.clicked_area).G_DATA(i)
next i

Universe.step_total=Universe.step_total+1

}




Univ_Finish{

}
#end_rule UNIVERSE




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.POWERGRID.TRANS
Agt_Init{
My.C1=0.5//+@eRnd(0.2)
My.C2=1.0
My.C3=1.0//+@eRnd(0.2)
//My.C4=0.2
//My.D1=1.0
//My.D2=0.5
//My.D3=1.0
//dG=-1
}

Agt_Step{

//-------------------------------------------------------
//通常モード処理
//-------------------------------------------------------
if Universe.nego_mode==false then 
	//U, dUの計算
		My.U = -My.C3*(My.x_i-My.C1)^2+My.C2
		My.dU = -2*My.C3*(My.x_i-My.C1)
	/*
	if -My.C1<=My.x_i And My.x_i<My.C1 then
		My.U=My.C2
		My.dU=0
	Else
		if My.x_i< -My.C1 then
			My.U=-My.C3*(My.x_i+My.C1)^2+My.C2
			My.dU=-2*My.C3*(My.x_i+My.C1)
		else
			My.U=-My.C3*(My.x_i-My.C1)^2+My.C2
			My.dU=-2*My.C3*(My.x_i-My.C1)
		end if
	end if
	*/
	
	if Universe.pricing_mode != 0 then
		My.x_i_next=My.x_i + Universe.alpha * (My.dU - My.from_terminal.lamda+My.to_terminal.lamda )
	Else
		My.x_i_next=My.x_i + Universe.alpha * (My.dU - My.from_player.lamda+My.to_player.lamda )
	end if

end if

//-------------------------------------------------------
//交渉モード処理
//-------------------------------------------------------
if Universe.nego_mode==true then 

end if

}
#end_rule UNIVERSE.POWERGRID.TRANS




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.POWERGRID.TRANS_TERMINAL
Agt_Init{
My.lamda=0
My.x_i=0
My.x_s=0
My.gamma=Universe.gamma
My.u_x=0
My.u_l=0
My.v_l=0
My.v_xl=0
My.a_i=0
My.b_i=0
My.lamda=0
My.x_i=0
My.x_s=0
My.x_est_0=0//0.5
}

Agt_Step{
Dim one as Agt
Dim sigma as Double
Dim init as Double

//My.gamma=1/CountAgtSet(My.link)*Universe.gamma
If My.type=="from" then
	My.x_i = - My.trans.x_i
else
	My.x_i = My.trans.x_i
end if

//-------------------------------------------------------
//交渉モード処理
//-------------------------------------------------------
if Universe.nego_mode==true then 

	if Universe.ct_nego==1 then
	
		if Universe.pricing_mode == 1 then
			init=My.x_i
		elseif Universe.pricing_mode == 2 then
		
			if Universe.s==0 then
				init=My.x_est_0
			else
				init=My.x_s
			end if
			
		elseif Universe.pricing_mode == 3 then
			
			if Universe.s==0 then
				init=My.x_est_0
			elseif Universe.s==1 then
				init=My.x_s
			else
				init=My.a_i*My.lamda+My.b_i
			end if
					
		else
		end if
		
		My.theta=My.lamda - Universe.beta_d*init
		My.theta_next=My.theta
		My.x_est=init
	else
	
		sigma=0
		for each one in My.link
				sigma=sigma+My.theta-one.theta
		next one
		My.theta_next=My.theta-Universe.gamma*sigma	
		
		if Universe.ct_nego==Universe.nego_step_number then
			if Universe.pricing_mode == 3 then
				My.u_x=My.u_x+My.x_i
				My.u_l=My.u_l+My.lamda
				My.v_l=My.v_l+My.lamda^2
				My.v_xl=My.v_xl+My.x_i*My.lamda
				if (Universe.s+1)*My.v_l-My.u_l^2 != 0 then
					My.a_i=((Universe.s+1)*My.v_xl-My.u_x*My.u_l)/((Universe.s+1)*My.v_l-My.u_l^2)
					My.b_i=(My.v_l*My.u_x-My.v_xl*My.u_l)/((Universe.s+1)*My.v_l-My.u_l^2)
				end if
			end if	
			My.lamda=My.theta_next
			My.x_s=My.x_i
		end if
	end if	
	
end if
}
#end_rule UNIVERSE.POWERGRID.TRANS_TERMINAL




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.POWERGRID.HOME
Agt_Init{
My.C1=0.5//+@eRnd(0.2)
My.C2=1.0
My.C3=1.0//+@eRnd(0.2)
My.C4=0.2
//My.D1=1.0
//My.D2=0.5
//My.D3=1.0
//My.dG=-1
My.gamma=Universe.gamma
My.u_x=0
My.u_l=0
My.v_l=0
My.v_xl=0
My.a_i=0
My.b_i=0
My.lamda=0
My.x_i=0
My.x_s=0
My.x_est_0=0//-0.5
}

Agt_Step{
Dim one as Agt
Dim sigma as Double
Dim init as Double

My.sv_lamda=My.area.lamda
//My.gamma=1/CountAgtSet(My.link)*Universe.gamma

//-------------------------------------------------------
//通常モード処理
//-------------------------------------------------------
if Universe.nego_mode==false then 
	//U, dUの計算
	//if My.x_i>-My.C1 then
		My.U = -My.C3*(My.x_i+My.C1)^2+My.C2
		My.dU = -2*My.C3*(My.x_i+My.C1)
	//Else
		//My.U = -My.C4*(My.x_i+My.C1)^2+My.C2
		//My.dU = -2*My.C4*(My.x_i+My.C1)
	//end if
	
	//状態量の更新
	if Universe.pricing_mode != 0 then
		My.x_i_next=My.x_i + Universe.alpha * (My.dU +  My.lamda )
	Else
		My.x_i_next=My.x_i + Universe.alpha * (My.dU +  My.area.lamda )
	end if
	
end if

//-------------------------------------------------------
//交渉モード処理
//-------------------------------------------------------
if Universe.nego_mode==true then 

	if Universe.ct_nego==1 then

		if Universe.pricing_mode == 1 then
			init=My.x_i
		elseif Universe.pricing_mode == 2 then
		
			if Universe.s==0 then
				init=My.x_est_0
			else
				init=My.x_s
			end if
			
		elseif Universe.pricing_mode == 3 then
			
			if Universe.s==0 then
				init=My.x_est_0
			elseif Universe.s==1 then
				init=My.x_s
			else
				init=My.a_i*My.lamda+My.b_i
			end if
	
		else
		end if
		
		My.theta=My.lamda - Universe.beta_d*init
		My.theta_next=My.theta
		My.x_est=init
				
	else
	
		sigma=0
		for each one in My.link
				sigma=sigma+My.theta-one.theta
		next one
		My.theta_next=My.theta-Universe.gamma*sigma	
	
		if Universe.ct_nego==Universe.nego_step_number then
			if Universe.pricing_mode == 3 then
				My.u_x=My.u_x+My.x_i
				My.u_l=My.u_l+My.lamda
				My.v_l=My.v_l+My.lamda^2
				My.v_xl=My.v_xl+My.x_i*My.lamda
				if (Universe.s+1)*My.v_l-My.u_l^2 != 0 then
					My.a_i=((Universe.s+1)*My.v_xl-My.u_x*My.u_l)/((Universe.s+1)*My.v_l-My.u_l^2)
					My.b_i=(My.v_l*My.u_x-My.v_xl*My.u_l)/((Universe.s+1)*My.v_l-My.u_l^2)
				end if
			end if	
			My.lamda=My.theta_next
			My.x_s=My.x_i
		end if
	end if	
	
end if


}
#end_rule UNIVERSE.POWERGRID.HOME




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.POWERGRID.SOLAR
Agt_Init{
My.C1=0.8//+@eRnd(0.2)
My.C2=1.0
My.C3=0.2//+@eRnd(0.1)
My.C4=1.0
//My.D1=1.0
//My.D2=0.5
//My.D3=1.0
My.dG=1
My.gamma=Universe.gamma
My.u_x=0
My.u_l=0
My.v_l=0
My.v_xl=0
My.a_i=0
My.b_i=0
My.lamda=0
My.x_i=0
My.x_s=0
My.x_est_0=0//0.8
}

Agt_Step{
Dim one as Agt
Dim sigma as Double
Dim init as Double

//My.gamma=1/CountAgtSet(My.link)*Universe.gamma

//-------------------------------------------------------
//通常モード処理
//-------------------------------------------------------
if Universe.nego_mode==false then 
	//U, dUの計算
	//if My.x_i<My.C1 then
		My.U = -My.C3*(My.x_i-My.C1)^2+My.C2
		My.dU = -2*My.C3*(My.x_i-My.C1)
	//Else
		//My.U = -My.C4*(My.x_i-My.C1)^2+My.C2
		//My.dU = -2*My.C4*(My.x_i-My.C1)
	//end if
	
	if Universe.pricing_mode != 0 then
		My.x_i_next  =My.x_i + Universe.alpha * (My.dU + My.lamda )
	Else
		My.x_i_next = My.x_i + Universe.alpha * (My.dU + My.area.lamda )
	end if
	
end if

//-------------------------------------------------------
//交渉モード処理
//-------------------------------------------------------
if Universe.nego_mode==true then 

	if Universe.ct_nego==1 then
	
		if Universe.pricing_mode == 1 then
			init=My.x_i
		elseif Universe.pricing_mode == 2 then
		
			if Universe.s==0 then
				init=My.x_est_0
			else
				init=My.x_s
			end if
			
		elseif Universe.pricing_mode == 3 then
			
			if Universe.s==0 then
				init=My.x_est_0
			elseif Universe.s==1 then
				init=My.x_s
			else
				init=My.a_i*My.lamda+My.b_i
			end if
	
		else
		end if
		
		My.theta=My.lamda - Universe.beta_d*init
		My.theta_next=My.theta
		My.x_est=init
	else
	
		sigma=0
		for each one in My.link
				sigma=sigma+My.theta-one.theta
		next one
		My.theta_next=My.theta-Universe.gamma*sigma	
	
		if Universe.ct_nego==Universe.nego_step_number then
			if Universe.pricing_mode == 3 then
				My.u_x=My.u_x+My.x_i
				My.u_l=My.u_l+My.lamda
				My.v_l=My.v_l+My.lamda^2
				My.v_xl=My.v_xl+My.x_i*My.lamda
				if (Universe.s+1)*My.v_l-My.u_l^2 != 0 then
					My.a_i=((Universe.s+1)*My.v_xl-My.u_x*My.u_l)/((Universe.s+1)*My.v_l-My.u_l^2)
					My.b_i=(My.v_l*My.u_x-My.v_xl*My.u_l)/((Universe.s+1)*My.v_l-My.u_l^2)
				end if
			end if	
			My.lamda=My.theta_next
			My.x_s=My.x_i
		end if	
	end if
end if

}
#end_rule UNIVERSE.POWERGRID.SOLAR




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.POWERGRID.AREA
Agt_Init{
My.lamda=0
My.lamda_next=0
My.G_i=0
}

Agt_Step{
Dim one as Agt
Dim temp_agtset as Agtset

//-------------------------------------------------------
//通常モード処理
//-------------------------------------------------------
if Universe.nego_mode==false then 
	My.G_i = 0
	//ClearAgtSet(temp_agtset)
	//DuplicateAgtSet(temp_agtset ,My.members) 
	//DelAgtSet (temp_agtset, My.trans_terminals)
	For each one in My.members
		My.G_i = My.G_i + one.x_i
	next one
	For each one in My.trans_terminals
		My.G_i = My.G_i + one.x_i
	next one
	
	/*
	For each one in My.trans_out_set
		My.G_i = My.G_i - one.x_i
	next one
	For each one in My.trans_in_set
		My.G_i = My.G_i + one.x_i
	next one
	*/

	if Universe.time_min == 0 And Universe.time_second == 0 And Universe.time_hour != 0 then
		My.lamda_next  = My.lamda - Universe.beta * My.G_i
	end if

	My.p=My.lamda
	My.G_DATA(Universe.count)=My.G_i
end if


if Universe.nego_mode==true then 

if Universe.ct_nego==1 then
	My.init_ave = 0
	//ClearAgtSet(temp_agtset)
	//DuplicateAgtSet(temp_agtset ,My.members) 
	
	For each one in My.members
		My.init_ave = My.init_ave+one.lamda-Universe.beta_d*one.x_i
	next one
	For each one in My.trans_terminals
		My.init_ave = My.init_ave+one.lamda-Universe.beta_d*one.x_i
	next one

	My.init_ave=My.init_ave/(CountAgtSet(My.members)+CountAgtSet(My.trans_terminals))

end if

end if

}
#end_rule UNIVERSE.POWERGRID.AREA




//-------------------------------------------------------
// Simulation Definition Division
//-------------------------------------------------------
Single_Simulation {
    Step_Max = 0;
    Time_Max = 0;
    End_Condition = "";
    Exec_Wait = 0;
    Exec_Order = Component;
    Exec_Order_Random_First_Step_Only = No;
    Random_Seed = 0;
    Redraw_Timing = Step;
    Redraw_Interval = 10;
    Garbage_Interval = 0;
}


//-------------------------------------------------------
// Simulation Loop Definition Division
//-------------------------------------------------------
Repeat_Simulation {
    Value_Change = None;
    Initial_Value_Change_None {
        Repeat_Max = 1;
    }
}


//-------------------------------------------------------
// Executing Order By Agent Component Definition Division
//-------------------------------------------------------
Executing_Order_Component {
    Component_Priority = "Universe.powergrid.trans", 1;
    Component_Priority = "Universe.powergrid.trans_terminal", 1;
    Component_Priority = "Universe.powergrid.home", 4;
    Component_Priority = "Universe.powergrid.solar", 5;
    Component_Priority = "Universe.powergrid.area", 6;
}


//-------------------------------------------------------
// 2 Dimension Map Display Definition Division
//-------------------------------------------------------
Map_Output {
    Map_Space_Name = "Universe.powergrid";
    Map_Name = "powergrid";
    Title = "powergrid";
    Disable = No;
    Background_Color = 255, 255, 255;
    Position_x = 25;
    Position_y = 20;
    Size_x = 779;
    Size_y = 629;
    Remarks = Yes;
    Legend_Pos = Top;
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    FastDraw = Yes;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 50;
    Axis_Label = "", "";
    Draw_Range = 0, 0, 150, 150;
    Ruled_Line = No;
    Text_Display = No;
    Text_Display_Variable_Name = "Universe.mode";
    Chess_Type_Display_Position = Yes;
    Background_Transparent = No;
    Target_Layer = 0;
    Coordinate_Display = No;
    Space_Kind = Square_2D;
    BG_Pict = No;
    BG_Type = 0;
    BG_Var_Name = "";
    BG_File_Name = "";
    Origin_Position = 2;
    Output_Group_Name = "";
    Output {
        Map_Element_Name = "送電ターミナル";
        Map_Element = Agent_Variable;
        Output_Expression = "Universe.powergrid.trans_terminal";
        Draw_Line = Yes;
        Collection_Name = "Universe.powergrid.trans_terminal.pair";
        Line_Type = 1;
        Line_Arrow = 1;
        Line_Width = 1;
        Line_Color = 0, 0, 204;
        Line_Type_Variable = "";
        Line_Arrow_Variable = "";
        Line_Width_Variable = "";
        Line_Color_Variable = "";
        Agent_Color = 255,0,0;
        Marker_Id = -1;
        Effective_Figures = 0;
        Format_Id = 0;
        Agent_Image_Direction = No;
        Icon_Type = 0;
        Icon_Var_Name = "";
        Icon_Transparent = No;
        Icon_Enlarg_Reduce = No;
        Icon_File_Name = "image_trans.png";
        Num_Display = No;
        Num_Var_Name = "";
        Agent_Image_Magnify_by_value = Yes;
        Agent_Image_Magnify_Value = 0.1;
        Agent_Image_Magnify_Variable_Name = "Universe.powergrid.trans_terminal.ID";
        Agent_Image_Transparency_by_value = Yes;
        Agent_Image_Transparency_Value = 0.0;
        Agent_Image_Transparency_Variable_Name = "Universe.powergrid.trans_terminal.ID";
    }
    Output {
        Map_Element_Name = "需要家";
        Map_Element = Agent_Variable;
        Output_Expression = "Universe.powergrid.home";
        Draw_Line = Yes;
        Collection_Name = "Universe.powergrid.home.link";
        Line_Type = 1;
        Line_Arrow = 1;
        Line_Width = 1;
        Line_Color = 255, 0, 0;
        Line_Type_Variable = "";
        Line_Arrow_Variable = "";
        Line_Width_Variable = "";
        Line_Color_Variable = "";
        Agent_Color = 255,0,0;
        Marker_Id = -1;
        Effective_Figures = 0;
        Format_Id = 0;
        Agent_Image_Direction = No;
        Icon_Type = 0;
        Icon_Var_Name = "";
        Icon_Transparent = No;
        Icon_Enlarg_Reduce = No;
        Icon_File_Name = "image_home.png";
        Num_Display = No;
        Num_Var_Name = "Universe.powergrid.home.ID";
        Agent_Image_Magnify_by_value = Yes;
        Agent_Image_Magnify_Value = 0.1;
        Agent_Image_Magnify_Variable_Name = "Universe.powergrid.home.ID";
        Agent_Image_Transparency_by_value = Yes;
        Agent_Image_Transparency_Value = 0.0;
        Agent_Image_Transparency_Variable_Name = "Universe.powergrid.home.ID";
    }
    Output {
        Map_Element_Name = "発電家";
        Map_Element = Agent_Variable;
        Output_Expression = "Universe.powergrid.solar";
        Draw_Line = Yes;
        Collection_Name = "Universe.powergrid.solar.link";
        Line_Type = 1;
        Line_Arrow = 1;
        Line_Width = 1;
        Line_Color = 255, 0, 0;
        Line_Type_Variable = "";
        Line_Arrow_Variable = "";
        Line_Width_Variable = "";
        Line_Color_Variable = "";
        Agent_Color = 255,0,0;
        Marker_Id = -1;
        Effective_Figures = 0;
        Format_Id = 0;
        Agent_Image_Direction = No;
        Icon_Type = 0;
        Icon_Var_Name = "";
        Icon_Transparent = No;
        Icon_Enlarg_Reduce = No;
        Icon_File_Name = "image_solar.png";
        Num_Display = No;
        Num_Var_Name = "";
        Agent_Image_Magnify_by_value = Yes;
        Agent_Image_Magnify_Value = 0.1;
        Agent_Image_Magnify_Variable_Name = "Universe.powergrid.solar.ID";
        Agent_Image_Transparency_by_value = Yes;
        Agent_Image_Transparency_Value = 0.0;
        Agent_Image_Transparency_Variable_Name = "Universe.powergrid.solar.ID";
    }
    Output {
        Map_Element_Name = "地域";
        Map_Element = Agent_Variable;
        Output_Expression = "Universe.powergrid.area";
        Draw_Line = No;
        Collection_Name = "";
        Line_Type = 0;
        Line_Arrow = 0;
        Line_Width = 0;
        Line_Color = 0, 0, 0;
        Line_Type_Variable = "";
        Line_Arrow_Variable = "";
        Line_Width_Variable = "";
        Line_Color_Variable = "";
        Agent_Color = 255,204,153;
        Marker_Id = -1;
        Effective_Figures = 0;
        Format_Id = 0;
        Agent_Image_Direction = No;
        Icon_Type = 0;
        Icon_Var_Name = "";
        Icon_Transparent = No;
        Icon_Enlarg_Reduce = No;
        Icon_File_Name = "image_area.png";
        Num_Display = No;
        Num_Var_Name = "Universe.powergrid.area.serial";
        Agent_Image_Magnify_by_value = Yes;
        Agent_Image_Magnify_Value = 0.6;
        Agent_Image_Magnify_Variable_Name = "Universe.powergrid.area.ID";
        Agent_Image_Transparency_by_value = Yes;
        Agent_Image_Transparency_Value = 0.0;
        Agent_Image_Transparency_Variable_Name = "Universe.powergrid.area.ID";
    }
}


//-------------------------------------------------------
// Time Graph Output Definition Division
//-------------------------------------------------------
Time_Graph {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Graph_Name = "Step Total";
    Title = "合計停滞量";
    Disable = Yes;
    Background_Color = 255, 255, 255;
    Remarks = Yes;
    Legend_Pos = Top;
    FastDraw = Yes;
    Position_x = 498;
    Position_y = 27;
    Size_x = 878;
    Size_y = 311;
    Axis_Label = "", "";
    Draw_By_JFree_Chart = Yes;
    Scale = 0, 0.0, 1000, 100.0, 100, 10.0;
    ScaleAuto = Yes, Yes;
    Output_Group_Name = "";
    Output {
        Graph_Element_Name = "合計停滞量";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 1;
        Output_Expression = "Universe.e_total";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 255, 0);
    }
}


//-------------------------------------------------------
// Time Graph Output Definition Division
//-------------------------------------------------------
Time_Graph {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Graph_Name = "価格(スーパーバイザ方式)";
    Title = "価格";
    Disable = No;
    Background_Color = 255, 255, 255;
    Remarks = Yes;
    Legend_Pos = Top;
    FastDraw = No;
    Position_x = 771;
    Position_y = 70;
    Size_x = 576;
    Size_y = 535;
    Axis_Label = "", "";
    Draw_By_JFree_Chart = Yes;
    Scale = 0, 0.0, 1000, 100.0, 100, 10.0;
    ScaleAuto = Yes, Yes;
    Output_Group_Name = "";
    Output {
        Graph_Element_Name = "地域1";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "Universe.powergrid.area(1).p";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 255, 0);
    }
    Output {
        Graph_Element_Name = "地域2";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "Universe.powergrid.area(2).p";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (51, 102, 255);
    }
    Output {
        Graph_Element_Name = "地域3";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "Universe.powergrid.area(3).p";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 51, 153);
    }
    Output {
        Graph_Element_Name = "地域4";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "Universe.powergrid.area(4).p";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (153, 0, 51);
    }
    Output {
        Graph_Element_Name = "地域0";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "Universe.powergrid.area(0).p";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (204, 255, 0);
    }
}


//-------------------------------------------------------
// Time Graph Output Definition Division
//-------------------------------------------------------
Time_Graph {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Graph_Name = "需要供給量";
    Title = "需要供給量";
    Disable = Yes;
    Background_Color = 255, 255, 255;
    Remarks = Yes;
    Legend_Pos = Top;
    FastDraw = No;
    Position_x = 57;
    Position_y = 370;
    Size_x = 500;
    Size_y = 300;
    Axis_Label = "", "";
    Draw_By_JFree_Chart = Yes;
    Scale = 0, 0.0, 1000, 100.0, 100, 10.0;
    ScaleAuto = Yes, Yes;
    Output_Group_Name = "";
    Output {
        Graph_Element_Name = "home1";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "Universe.powergrid.home(1).x_i";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 255, 0);
    }
    Output {
        Graph_Element_Name = "home2";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "Universe.powergrid.home(2).x_i";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (51, 102, 255);
    }
    Output {
        Graph_Element_Name = "home3";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "Universe.powergrid.home(3).x_i";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 51, 153);
    }
    Output {
        Graph_Element_Name = "home4";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "Universe.powergrid.home(4).x_i";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (153, 0, 51);
    }
    Output {
        Graph_Element_Name = "home5";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "Universe.powergrid.home(5).x_i";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (204, 255, 0);
    }
    Output {
        Graph_Element_Name = "home6";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "Universe.powergrid.home(6).x_i";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (153, 0, 102);
    }
    Output {
        Graph_Element_Name = "home7";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "Universe.powergrid.home(7).x_i";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (102, 0, 102);
    }
    Output {
        Graph_Element_Name = "home8";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "Universe.powergrid.home(8).x_i";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (51, 0, 51);
    }
    Output {
        Graph_Element_Name = "home9";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "Universe.powergrid.home(9).x_i";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 153, 153);
    }
    Output {
        Graph_Element_Name = "home0";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "Universe.powergrid.home(0).x_i";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (153, 153, 255);
    }
}


//-------------------------------------------------------
// Numeric Data Window Output Definition Division
//-------------------------------------------------------
Numeric_Output {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Position_x = 8;
    Position_y = 431;
    Size_x = 305;
    Size_y = 249;
    Numeric_Name = "Time&Mode";
    Title = "Time&Mode";
    Disable = No;
    Output_Group_Name = "";
    OUTPUT {
        Output_Element_Name = "日";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "Universe.time_day";
    }
    OUTPUT {
        Output_Element_Name = "時";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "Universe.time_hour";
    }
    OUTPUT {
        Output_Element_Name = "分";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "Universe.time_min";
    }
    OUTPUT {
        Output_Element_Name = "秒";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "Universe.time_second";
    }
    OUTPUT {
        Output_Element_Name = "モード";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "Universe.mode";
    }
    OUTPUT {
        Output_Element_Name = "交渉ステップ";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "Universe.ct_nego";
    }
    OUTPUT {
        Output_Element_Name = "s";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "Universe.s";
    }
}


//-------------------------------------------------------
// Time Graph Output Definition Division
//-------------------------------------------------------
Time_Graph {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Graph_Name = "目的関数";
    Title = "目的関数";
    Disable = No;
    Background_Color = 255, 255, 255;
    Remarks = Yes;
    Legend_Pos = Top;
    FastDraw = No;
    Position_x = 499;
    Position_y = 208;
    Size_x = 571;
    Size_y = 394;
    Axis_Label = "", "";
    Draw_By_JFree_Chart = Yes;
    Scale = 0, 0.0, 1000, 100.0, 100, 10.0;
    ScaleAuto = Yes, Yes;
    Output_Group_Name = "";
    Output {
        Graph_Element_Name = "F";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "Universe.U_total";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 0, 255);
    }
}


//-------------------------------------------------------
// Line Graph Output Definition Division
//-------------------------------------------------------
Line_Graph {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Graph_Name = "合計停滞量";
    Title = "合計停滞量";
    Disable = Yes;
    Background_Color = 255, 255, 255;
    Remarks = Yes;
    Legend_Pos = Top;
    FastDraw = Yes;
    Position_x = 44;
    Position_y = 11;
    Size_x = 1070;
    Size_y = 705;
    Axis_Label = "min", "e_total";
    Output_Group_Name = "";
    Output {
        Graph_Element_Name = "e_total";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        The_Number_Of_Datas = "GetArraySize(Universe.DATA_time_min)";
        Variable_Id_X_Axis = Universe.DATA_time_min;
        Variable_Id_Y_Axis = Universe.DATA_e_total;
        Graph_Element_Color = (0, 0, 0);
    }
}


//-------------------------------------------------------
// Time Graph Output Definition Division
//-------------------------------------------------------
Time_Graph {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Graph_Name = "theta";
    Title = "theta";
    Disable = Yes;
    Background_Color = 255, 255, 255;
    Remarks = Yes;
    Legend_Pos = Top;
    FastDraw = No;
    Position_x = -240;
    Position_y = 264;
    Size_x = 944;
    Size_y = 640;
    Axis_Label = "", "";
    Draw_By_JFree_Chart = Yes;
    Scale = 0, 0.0, 1000, 100.0, 100, 10.0;
    ScaleAuto = Yes, Yes;
    Output_Group_Name = "";
    Output {
        Graph_Element_Name = "HOME0";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "Universe.powergrid.home(0).theta";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 255, 0);
    }
    Output {
        Graph_Element_Name = "HOME1";
        Line_Color = 0, 0, 255;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "Universe.powergrid.home(1).theta";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (204, 0, 51);
    }
    Output {
        Graph_Element_Name = "HOME2";
        Line_Color = 0, 255, 255;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "Universe.powergrid.home(2).theta";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 0, 255);
    }
    Output {
        Graph_Element_Name = "地域0(SV方式価格)";
        Line_Color = 0, 255, 255;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "Universe.powergrid.area(0).p";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (204, 51, 255);
    }
}


//-------------------------------------------------------
// Time Graph Output Definition Division
//-------------------------------------------------------
Time_Graph {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Graph_Name = "状態量";
    Title = "x_i";
    Disable = Yes;
    Background_Color = 255, 255, 255;
    Remarks = Yes;
    Legend_Pos = Top;
    FastDraw = No;
    Position_x = 104;
    Position_y = 356;
    Size_x = 643;
    Size_y = 300;
    Axis_Label = "", "";
    Draw_By_JFree_Chart = Yes;
    Scale = 0, 0.0, 1000, 100.0, 100, 10.0;
    ScaleAuto = Yes, Yes;
    Output_Group_Name = "";
    Output {
        Graph_Element_Name = "HOME0";
        Line_Color = 0, 0, 255;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "Universe.powergrid.home(0).x_i";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 255, 0);
    }
    Output {
        Graph_Element_Name = "HOME1";
        Line_Color = 0, 255, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "Universe.powergrid.home(1).x_i";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (255, 0, 0);
    }
    Output {
        Graph_Element_Name = "HOME2";
        Line_Color = 255, 0, 255;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "Universe.powergrid.home(2).x_i";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 0, 255);
    }
}


//-------------------------------------------------------
// Time Graph Output Definition Division
//-------------------------------------------------------
Time_Graph {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Graph_Name = "x_est(HOME)";
    Title = "x_est(HOME)";
    Disable = Yes;
    Background_Color = 255, 255, 255;
    Remarks = Yes;
    Legend_Pos = Top;
    FastDraw = No;
    Position_x = 100;
    Position_y = 100;
    Size_x = 678;
    Size_y = 340;
    Axis_Label = "", "";
    Draw_By_JFree_Chart = Yes;
    Scale = 0, 0.0, 1000, 100.0, 100, 10.0;
    ScaleAuto = Yes, Yes;
    Output_Group_Name = "";
    Output {
        Graph_Element_Name = "x_est(HOME0)";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "Universe.powergrid.home(0).x_est";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (255, 0, 51);
    }
    Output {
        Graph_Element_Name = "x_i(HOME0)";
        Line_Color = 0, 0, 255;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "Universe.powergrid.home(0).x_i";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 0, 255);
    }
}


//-------------------------------------------------------
// Time Graph Output Definition Division
//-------------------------------------------------------
Time_Graph {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Graph_Name = "x_est(SOLAR)";
    Title = "x_est(SOLAR)";
    Disable = Yes;
    Background_Color = 255, 255, 255;
    Remarks = Yes;
    Legend_Pos = Top;
    FastDraw = No;
    Position_x = -118;
    Position_y = 183;
    Size_x = 849;
    Size_y = 466;
    Axis_Label = "", "";
    Draw_By_JFree_Chart = Yes;
    Scale = 0, 0.0, 1000, 100.0, 100, 10.0;
    ScaleAuto = Yes, Yes;
    Output_Group_Name = "";
    Output {
        Graph_Element_Name = "x_est(SOLAR0)";
        Line_Color = 255, 0, 0;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "Universe.powergrid.solar(0).x_est";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (255, 0, 51);
    }
    Output {
        Graph_Element_Name = "x_i(SOLAR0)";
        Line_Color = 0, 0, 255;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "Universe.powergrid.solar(0).x_i";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 0, 255);
    }
}


//-------------------------------------------------------
// Time Graph Output Definition Division
//-------------------------------------------------------
Time_Graph {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Graph_Name = "価格交渉";
    Title = "価格交渉";
    Disable = No;
    Background_Color = 255, 255, 255;
    Remarks = Yes;
    Legend_Pos = Top;
    FastDraw = No;
    Position_x = 344;
    Position_y = 6;
    Size_x = 565;
    Size_y = 370;
    Axis_Label = "step", "theta";
    Draw_By_JFree_Chart = Yes;
    Scale = 0, 0.0, 1000, 100.0, 100, 10.0;
    ScaleAuto = Yes, Yes;
    Output_Group_Name = "";
    Output {
        Graph_Element_Name = "1";
        Line_Color = 0, 0, 255;
        Line_Width = 1;
        Marker_Id = 0;
        Output_Expression = "Universe.output(1)";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (153, 204, 0);
    }
    Output {
        Graph_Element_Name = "2";
        Line_Color = 0, 255, 0;
        Line_Width = 1;
        Marker_Id = 0;
        Output_Expression = "Universe.output(2)";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (204, 204, 0);
    }
    Output {
        Graph_Element_Name = "3";
        Line_Color = 255, 0, 255;
        Line_Width = 1;
        Marker_Id = 0;
        Output_Expression = "Universe.output(3)";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (153, 0, 0);
    }
    Output {
        Graph_Element_Name = "4";
        Line_Color = 0, 255, 255;
        Line_Width = 1;
        Marker_Id = 0;
        Output_Expression = "Universe.output(4)";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (153, 0, 102);
    }
    Output {
        Graph_Element_Name = "5";
        Line_Color = 255, 255, 0;
        Line_Width = 1;
        Marker_Id = 0;
        Output_Expression = "Universe.output(5)";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (51, 0, 153);
    }
    Output {
        Graph_Element_Name = "6";
        Line_Color = 128, 128, 128;
        Line_Width = 1;
        Marker_Id = 0;
        Output_Expression = "Universe.output(6)";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 0, 153);
    }
    Output {
        Graph_Element_Name = "7";
        Line_Color = 255, 0, 0;
        Line_Width = 1;
        Marker_Id = 0;
        Output_Expression = "Universe.output(7)";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 102, 102);
    }
    Output {
        Graph_Element_Name = "8";
        Line_Color = 0, 0, 255;
        Line_Width = 1;
        Marker_Id = 0;
        Output_Expression = "Universe.output(8)";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (255, 51, 51);
    }
    Output {
        Graph_Element_Name = "9";
        Line_Color = 0, 255, 0;
        Line_Width = 1;
        Marker_Id = 0;
        Output_Expression = "Universe.output(9)";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (51, 255, 255);
    }
    Output {
        Graph_Element_Name = "10";
        Line_Color = 0, 255, 255;
        Line_Width = 2;
        Marker_Id = 0;
        Output_Expression = "Universe.output(10)";
        Expression_Value_Display = No;
        Effective_Fraction_Figures = 0;
        Graph_Element_Color = (0, 51, 51);
    }
}


//-------------------------------------------------------
// Line Graph Output Definition Division
//-------------------------------------------------------
Line_Graph {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Graph_Name = "需給バランス";
    Title = "需給バランス(選択した地域)";
    Disable = No;
    Background_Color = 255, 255, 255;
    Remarks = Yes;
    Legend_Pos = Top;
    FastDraw = Yes;
    Position_x = 779;
    Position_y = 67;
    Size_x = 903;
    Size_y = 705;
    Axis_Label = "time[min]", "G(x)";
    Output_Group_Name = "";
    Output {
        Graph_Element_Name = "G(x)";
        Line_Color = 255, 0, 0;
        Line_Width = 3;
        The_Number_Of_Datas = "GetArraySize(Universe.DATA_time_min)";
        Variable_Id_X_Axis = Universe.DATA_time_min;
        Variable_Id_Y_Axis = Universe.DATA_G_displayed;
        Graph_Element_Color = (0, 0, 0);
    }
}


//-------------------------------------------------------
// Numeric Data Window Output Definition Division
//-------------------------------------------------------
Numeric_Output {
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Position_x = 1338;
    Position_y = 112;
    Size_x = 197;
    Size_y = 134;
    Numeric_Name = "選択された地域";
    Title = "選択された地域";
    Disable = No;
    Output_Group_Name = "";
    OUTPUT {
        Output_Element_Name = "地域ID：";
        Figures = 0;
        Format_Id = 0;
        Output_Expression = "Universe.clicked_area";
    }
}


//-------------------------------------------------------
// Control Panel Definition Division
//-------------------------------------------------------
Control_Panel {
    Display_Area = 56, 641, 454, 275;
    Panel_Item {
        Item_Type = Edit_Box;
        Item_Name = "地域数";
        Display_Area = 0, 0, 0, 0;
        Font_Name = "";
        Font_Char_Set = 0;
        Font_Size = 0.0;
        Font_Style = 0;
        Font_Color = 0, 0, 0;
        Font_Background_Color = 0, 0, 0;
        Var_Name = "Universe.area_num";
        Text_Data = "14";
    }
    Panel_Item {
        Item_Type = Edit_Box;
        Item_Name = "供給家数";
        Display_Area = 0, 0, 0, 0;
        Font_Name = "";
        Font_Char_Set = 0;
        Font_Size = 0.0;
        Font_Style = 0;
        Font_Color = 0, 0, 0;
        Font_Background_Color = 0, 0, 0;
        Var_Name = "Universe.solar_num";
        Text_Data = "15";
    }
    Panel_Item {
        Item_Type = Edit_Box;
        Item_Name = "需要家数";
        Display_Area = 0, 0, 0, 0;
        Font_Name = "";
        Font_Char_Set = 0;
        Font_Size = 0.0;
        Font_Style = 0;
        Font_Color = 0, 0, 0;
        Font_Background_Color = 0, 0, 0;
        Var_Name = "Universe.home_num";
        Text_Data = "15";
    }
    Panel_Item {
        Item_Type = Edit_Box;
        Item_Name = "α";
        Display_Area = 0, 0, 0, 0;
        Font_Name = "";
        Font_Char_Set = 0;
        Font_Size = 0.0;
        Font_Style = 0;
        Font_Color = 0, 0, 0;
        Font_Background_Color = 0, 0, 0;
        Var_Name = "Universe.alpha";
        Text_Data = "0.06";
    }
    Panel_Item {
        Item_Type = Edit_Box;
        Item_Name = "β(SV方式)";
        Display_Area = 0, 0, 0, 0;
        Font_Name = "";
        Font_Char_Set = 0;
        Font_Size = 0.0;
        Font_Style = 0;
        Font_Color = 0, 0, 0;
        Font_Background_Color = 0, 0, 0;
        Var_Name = "Universe.beta";
        Text_Data = "0.04";
    }
    Panel_Item {
        Item_Type = Edit_Box;
        Item_Name = "c";
        Display_Area = 0, 0, 0, 0;
        Font_Name = "";
        Font_Char_Set = 0;
        Font_Size = 0.0;
        Font_Style = 0;
        Font_Color = 0, 0, 0;
        Font_Background_Color = 0, 0, 0;
        Var_Name = "Universe.beta_d";
        Text_Data = "1.2";
    }
    Panel_Item {
        Item_Type = Edit_Box;
        Item_Name = "γ";
        Display_Area = 0, 0, 0, 0;
        Font_Name = "";
        Font_Char_Set = 0;
        Font_Size = 0.0;
        Font_Style = 0;
        Font_Color = 0, 0, 0;
        Font_Background_Color = 0, 0, 0;
        Var_Name = "Universe.gamma";
        Text_Data = "0.04";
    }
    Panel_Item {
        Item_Type = Edit_Box;
        Item_Name = "乱数シード";
        Display_Area = 0, 0, 0, 0;
        Font_Name = "";
        Font_Char_Set = 0;
        Font_Size = 0.0;
        Font_Style = 0;
        Font_Color = 0, 0, 0;
        Font_Background_Color = 0, 0, 0;
        Var_Name = "Universe.RandomSeed";
        Text_Data = "18.0";
    }
    Panel_Item {
        Item_Type = Edit_Box;
        Item_Name = "リンクレンジ(地域)";
        Display_Area = 0, 0, 0, 0;
        Font_Name = "";
        Font_Char_Set = 0;
        Font_Size = 0.0;
        Font_Style = 0;
        Font_Color = 0, 0, 0;
        Font_Background_Color = 0, 0, 0;
        Var_Name = "Universe.link_range_area";
        Text_Data = "50.0";
    }
    Panel_Item {
        Item_Type = Edit_Box;
        Item_Name = "リンクレンジ(需要供給家)";
        Display_Area = 0, 0, 0, 0;
        Font_Name = "";
        Font_Char_Set = 0;
        Font_Size = 0.0;
        Font_Style = 0;
        Font_Color = 0, 0, 0;
        Font_Background_Color = 0, 0, 0;
        Var_Name = "Universe.link_range_player";
        Text_Data = "6.0";
    }
    Panel_Item {
        Item_Type = Drop_Down_List;
        Item_Name = "価格調整モード";
        Display_Area = 0, 0, 0, 0;
        Font_Name = "";
        Font_Char_Set = 0;
        Font_Size = 0.0;
        Font_Style = 0;
        Font_Color = 0, 0, 0;
        Font_Background_Color = 0, 0, 0;
        Var_Name = "Universe.pricing_mode_text";
        Drop_Down_List_Value = "スーパーバイザ方式","スーパーバイザ方式","交渉型：零時間","交渉型：零時間","交渉型：予測無","交渉型：予測無","交渉型：予測有","交渉型：予測有";
    }
}


//-------------------------------------------------------
// Space Initial Value Definition Divsion
//-------------------------------------------------------
Space_Initial {
}


//-------------------------------------------------------
// Other Miscellaneous Data Definition Division
//-------------------------------------------------------
Others_Data {
    Indent = 4;
    Rule_Colored = Yes;
    Window_Hide_Run = 1;
    Debug_Position_x = 75;
    Debug_Position_y = 75;
    Debug_Size_x = 400;
    Debug_Size_y = 200;
    Console_Position_x = 156;
    Console_Position_y = 43;
    Console_Size_x = 318;
    Console_Size_y = 448;
    Componen_Tree_Position_x = 207;
    Componen_Tree_Position_y = 23;
    Componen_Tree_Size_x = 250;
    Componen_Tree_Size_y = 400;
    Console_Background_Color = 16777215;
    Console_Foreground_Color = 255;
    Console_DisplayLines_Max = 500;
    Font_Name = "Dialog";
    Font_Char_Set = 0;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 0, 0, 0;
}


//-------------------------------------------------------
// Network Information Definition Division
//-------------------------------------------------------
Network_Info {
    Global_Space_Area = 0, 0, 100, 100;
    Local_Space_Info {
    }
}


//-------------------------------------------------------
// Window Location Definition Division
//-------------------------------------------------------
Window_Rectangle {
    Window_Name = Main_Window, 79, 53, 1618, 990;
    Window_Name = Output_Setting_Window, 569, 350, 480, 290;
    Window_Name = Artisoc_Help_Window, 582, 40, 868, 667;
}


//-------------------------------------------------------
// Help Favorite Division
//-------------------------------------------------------
Help_Favorite {
}
